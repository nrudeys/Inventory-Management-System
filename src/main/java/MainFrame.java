
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileNotFoundException;
import java.sql.*;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jfree.data.category.DefaultCategoryDataset;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * <h1>Inventory Management System Application</h1>
 * The MainFrame program implements an application in which users can create, access, or modify data
 * relating to the their inventory and sales through SQL.
 *
 * @author Shahnur Syed
 * @version 1.0.0
 * @since 1.0.0
 */
public class MainFrame extends javax.swing.JFrame {

    Connection con;
    MainFrameSQLHelpers mainSQLHelpers;
    MainFrameHelpers mainHelpers;
    AnalysisChartsHelpers acHelpers;

    /**
     * Creates new form MainFrame
     *
     * @throws java.sql.SQLException JDBC error occurred
     * @throws java.io.FileNotFoundException File was not found
     * @throws java.text.ParseException Unable to parse data
     */
    public MainFrame() throws SQLException, FileNotFoundException, ParseException,
            BackingStoreException {

        initComponents();

        // Setup connection to SQLite DB
        con = DriverManager.getConnection("jdbc:sqlite:IMS.db");

        mainSQLHelpers = new MainFrameSQLHelpers(con, this, invtTable);
        mainHelpers = new MainFrameHelpers(this, mainSQLHelpers, invtTable, salesTable, clone);
        acHelpers = new AnalysisChartsHelpers(invtTable, salesTable);

        // Set user input fields invisible
        invtInputs.setVisible(false);
        saleInputs.setVisible(false);

        // Set up JTables (formatting/populating)
        mainHelpers.setAllTableFormats();
        mainSQLHelpers.selectAllSQL(invtTable);
        mainSQLHelpers.selectAllSQL(salesTable);

        // Add year options to analysisYearComboBox 
        setAllUniqueYears();

        // Set up MainFrame (sizing/color)
        MainFrame.this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        mainHelpers.setMainFrameColor(settingsDialog);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupJF = new javax.swing.JFrame();
        puSelIDBtn = new javax.swing.JButton();
        puItemIDTF = new javax.swing.JTextField();
        cloneSP = new javax.swing.JScrollPane();
        clone = new javax.swing.JTable();
        analysisJF = new javax.swing.JFrame();
        analysisSP = new javax.swing.JScrollPane();
        analysisPnl = new javax.swing.JPanel();
        totItemsLbl = new javax.swing.JLabel();
        totProfitsLbl = new javax.swing.JLabel();
        catBarGraphPnl = new javax.swing.JPanel();
        salesBarPnl = new javax.swing.JPanel();
        profitROIPnl = new javax.swing.JPanel();
        platformPnl = new javax.swing.JPanel();
        feesPnl = new javax.swing.JPanel();
        analysisYrCB = new javax.swing.JComboBox<>();
        printAnalysisBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        printJF = new javax.swing.JFrame();
        printPnl = new javax.swing.JPanel();
        invtTitleLbl = new javax.swing.JLabel();
        invtCloneSP = new javax.swing.JScrollPane();
        invtTableClone = new javax.swing.JTable();
        salesTitleLbl = new javax.swing.JLabel();
        salesCloneSP = new javax.swing.JScrollPane();
        salesTableClone = new javax.swing.JTable();
        settingsDialog = new javax.swing.JDialog();
        settingsLbl = new javax.swing.JLabel();
        colorSettingsBtn = new javax.swing.JButton();
        clrTablesBtn = new javax.swing.JButton();
        printInvtBtn = new javax.swing.JButton();
        printSalesBtn = new javax.swing.JButton();
        titleLbl = new javax.swing.JLabel();
        searchTF = new javax.swing.JTextField();
        invtInputs = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        categoryLbl = new javax.swing.JLabel();
        categoryTF = new javax.swing.JTextField();
        supplierLbl = new javax.swing.JLabel();
        supplierTF = new javax.swing.JTextField();
        conditionLabel = new javax.swing.JLabel();
        condCB = new javax.swing.JComboBox<>();
        quantityLbl = new javax.swing.JLabel();
        totalQtyTF = new javax.swing.JFormattedTextField();
        originalPriceLbl = new javax.swing.JLabel();
        origPriceTF = new javax.swing.JFormattedTextField();
        purchaseDateLbl = new javax.swing.JLabel();
        purchaseDC = new com.toedter.calendar.JDateChooser();
        sellingDateLbl = new javax.swing.JLabel();
        sellingDC = new com.toedter.calendar.JDateChooser();
        addItemBtn = new javax.swing.JButton();
        updtItemBtn = new javax.swing.JButton();
        delItemBtn = new javax.swing.JButton();
        selItemIDPnl = new javax.swing.JPanel();
        selectIDLbl = new javax.swing.JLabel();
        selIDCB = new javax.swing.JComboBox<>();
        saleInputs = new javax.swing.JPanel();
        itemIDLabel = new javax.swing.JLabel();
        selItemIDBtn = new javax.swing.JButton();
        custNameLbl = new javax.swing.JLabel();
        custNameTF = new javax.swing.JTextField();
        platformLbl = new javax.swing.JLabel();
        platformTF = new javax.swing.JTextField();
        saleSellingSDLbl = new javax.swing.JLabel();
        saleSellingDC = new com.toedter.calendar.JDateChooser();
        sellFeesLbl = new javax.swing.JLabel();
        sellFeesTF = new javax.swing.JFormattedTextField();
        processFeesLbl = new javax.swing.JLabel();
        processFeesTF = new javax.swing.JFormattedTextField();
        shipFeesLbl = new javax.swing.JLabel();
        shipFeesTF = new javax.swing.JFormattedTextField();
        addSaleBtn = new javax.swing.JButton();
        updtSaleBtn = new javax.swing.JButton();
        delSaleBtn = new javax.swing.JButton();
        selSaleIDPnl = new javax.swing.JPanel();
        saleSelIDLbl = new javax.swing.JLabel();
        selSaleIDCB = new javax.swing.JComboBox<>();
        sellingPriceLbl = new javax.swing.JLabel();
        qtySoldLbl = new javax.swing.JLabel();
        qtySoldTF = new javax.swing.JFormattedTextField();
        sellingPriceTF = new javax.swing.JFormattedTextField();
        itemIDTF = new javax.swing.JFormattedTextField();
        tabbedPnl = new javax.swing.JTabbedPane();
        invtPnl = new javax.swing.JPanel();
        invtSP = new javax.swing.JScrollPane();
        invtTable = new javax.swing.JTable();
        salePnl = new javax.swing.JPanel();
        saleSP = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable();
        addEntryBtn = new javax.swing.JButton();
        editEntryBtn = new javax.swing.JButton();
        settingsBtn = new javax.swing.JButton();
        analysisBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();

        popupJF.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        puSelIDBtn.setText("Select");
        puSelIDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puSelIDBtnClicked(evt);
            }
        });

        clone.setAutoCreateRowSorter(true);
        clone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cloneTableMouseClicked(evt);
            }
        });
        cloneSP.setViewportView(clone);

        javax.swing.GroupLayout popupJFLayout = new javax.swing.GroupLayout(popupJF.getContentPane());
        popupJF.getContentPane().setLayout(popupJFLayout);
        popupJFLayout.setHorizontalGroup(
            popupJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, popupJFLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(popupJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cloneSP, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, popupJFLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(puItemIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(puSelIDBtn)))
                .addGap(30, 30, 30))
        );
        popupJFLayout.setVerticalGroup(
            popupJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupJFLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(cloneSP, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(popupJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(puItemIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(puSelIDBtn))
                .addGap(45, 45, 45))
        );

        analysisJF.setSize(new java.awt.Dimension(976, 520));
        analysisJF.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                analysisJFWindowClosing(evt);
            }
        });

        analysisPnl.setAutoscrolls(true);

        totItemsLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totItemsLbl.setText("Total Available Items Quantity:");

        totProfitsLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totProfitsLbl.setText("Total Profits:");

        catBarGraphPnl.setPreferredSize(new java.awt.Dimension(878, 330));

        javax.swing.GroupLayout catBarGraphPnlLayout = new javax.swing.GroupLayout(catBarGraphPnl);
        catBarGraphPnl.setLayout(catBarGraphPnlLayout);
        catBarGraphPnlLayout.setHorizontalGroup(
            catBarGraphPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        catBarGraphPnlLayout.setVerticalGroup(
            catBarGraphPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );

        salesBarPnl.setMinimumSize(new java.awt.Dimension(0, 0));
        salesBarPnl.setPreferredSize(new java.awt.Dimension(878, 330));
        salesBarPnl.setRequestFocusEnabled(false);

        javax.swing.GroupLayout salesBarPnlLayout = new javax.swing.GroupLayout(salesBarPnl);
        salesBarPnl.setLayout(salesBarPnlLayout);
        salesBarPnlLayout.setHorizontalGroup(
            salesBarPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        salesBarPnlLayout.setVerticalGroup(
            salesBarPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );

        profitROIPnl.setAutoscrolls(true);
        profitROIPnl.setPreferredSize(new java.awt.Dimension(878, 330));

        javax.swing.GroupLayout profitROIPnlLayout = new javax.swing.GroupLayout(profitROIPnl);
        profitROIPnl.setLayout(profitROIPnlLayout);
        profitROIPnlLayout.setHorizontalGroup(
            profitROIPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        profitROIPnlLayout.setVerticalGroup(
            profitROIPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );

        platformPnl.setAutoscrolls(true);
        platformPnl.setPreferredSize(new java.awt.Dimension(878, 330));

        javax.swing.GroupLayout platformPnlLayout = new javax.swing.GroupLayout(platformPnl);
        platformPnl.setLayout(platformPnlLayout);
        platformPnlLayout.setHorizontalGroup(
            platformPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        platformPnlLayout.setVerticalGroup(
            platformPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );

        feesPnl.setAutoscrolls(true);
        feesPnl.setPreferredSize(new java.awt.Dimension(878, 330));

        javax.swing.GroupLayout feesPnlLayout = new javax.swing.GroupLayout(feesPnl);
        feesPnl.setLayout(feesPnlLayout);
        feesPnlLayout.setHorizontalGroup(
            feesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        feesPnlLayout.setVerticalGroup(
            feesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );

        analysisYrCB.setToolTipText("Choose year");
        analysisYrCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisYrCBChosen(evt);
            }
        });

        printAnalysisBtn.setText("Print Analysis");
        printAnalysisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printAnalysisBtnClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Select Year:");

        javax.swing.GroupLayout analysisPnlLayout = new javax.swing.GroupLayout(analysisPnl);
        analysisPnl.setLayout(analysisPnlLayout);
        analysisPnlLayout.setHorizontalGroup(
            analysisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPnlLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(analysisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(analysisPnlLayout.createSequentialGroup()
                        .addComponent(feesPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(analysisPnlLayout.createSequentialGroup()
                        .addGroup(analysisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(catBarGraphPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                            .addComponent(salesBarPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                            .addComponent(profitROIPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                            .addComponent(platformPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analysisPnlLayout.createSequentialGroup()
                                .addGroup(analysisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totItemsLbl)
                                    .addComponent(totProfitsLbl))
                                .addGap(164, 687, Short.MAX_VALUE)))
                        .addGap(60, 60, 60))
                    .addGroup(analysisPnlLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(analysisYrCB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(printAnalysisBtn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        analysisPnlLayout.setVerticalGroup(
            analysisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPnlLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(totItemsLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totProfitsLbl)
                .addGap(18, 18, 18)
                .addGroup(analysisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(analysisYrCB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printAnalysisBtn))
                .addGap(30, 30, 30)
                .addComponent(catBarGraphPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(salesBarPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(profitROIPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(platformPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(feesPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
        );

        analysisSP.setViewportView(analysisPnl);

        javax.swing.GroupLayout analysisJFLayout = new javax.swing.GroupLayout(analysisJF.getContentPane());
        analysisJF.getContentPane().setLayout(analysisJFLayout);
        analysisJFLayout.setHorizontalGroup(
            analysisJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysisSP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 982, Short.MAX_VALUE)
        );
        analysisJFLayout.setVerticalGroup(
            analysisJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisJFLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(analysisSP, javax.swing.GroupLayout.DEFAULT_SIZE, 2029, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        invtTitleLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        invtTitleLbl.setText("INVENTORY TABLE");

        invtTableClone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        invtTableClone.setAutoscrolls(false);
        invtCloneSP.setViewportView(invtTableClone);

        salesTitleLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        salesTitleLbl.setText("SALES TABLE");

        salesTableClone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        salesTableClone.setAutoscrolls(false);
        salesCloneSP.setViewportView(salesTableClone);

        javax.swing.GroupLayout printPnlLayout = new javax.swing.GroupLayout(printPnl);
        printPnl.setLayout(printPnlLayout);
        printPnlLayout.setHorizontalGroup(
            printPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(printPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invtCloneSP, javax.swing.GroupLayout.DEFAULT_SIZE, 1505, Short.MAX_VALUE)
                    .addGroup(printPnlLayout.createSequentialGroup()
                        .addGroup(printPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invtTitleLbl)
                            .addComponent(salesTitleLbl))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(salesCloneSP))
                .addContainerGap())
        );
        printPnlLayout.setVerticalGroup(
            printPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, printPnlLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(invtTitleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invtCloneSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(salesTitleLbl)
                .addGap(18, 18, 18)
                .addComponent(salesCloneSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout printJFLayout = new javax.swing.GroupLayout(printJF.getContentPane());
        printJF.getContentPane().setLayout(printJFLayout);
        printJFLayout.setHorizontalGroup(
            printJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printJFLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(printPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        printJFLayout.setVerticalGroup(
            printJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printJFLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(printPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        settingsDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        settingsDialog.setMinimumSize(new java.awt.Dimension(200, 290));
        settingsDialog.setModal(true);
        settingsDialog.setResizable(false);

        settingsLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        settingsLbl.setText("Settings");

        colorSettingsBtn.setText("Color Settings");
        colorSettingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSettingsBtnClicked(evt);
            }
        });

        clrTablesBtn.setText("Clear Tables");
        clrTablesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clrTablesBtnClicked(evt);
            }
        });

        printInvtBtn.setText("Print Inventory");
        printInvtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInvtBtnClicked(evt);
            }
        });

        printSalesBtn.setText("Print Sales");
        printSalesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printSalesBtnClicked(evt);
            }
        });

        javax.swing.GroupLayout settingsDialogLayout = new javax.swing.GroupLayout(settingsDialog.getContentPane());
        settingsDialog.getContentPane().setLayout(settingsDialogLayout);
        settingsDialogLayout.setHorizontalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsDialogLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(printSalesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(printInvtBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clrTablesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorSettingsBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(settingsLbl)
                .addGap(74, 74, 74))
        );
        settingsDialogLayout.setVerticalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsDialogLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(settingsLbl)
                .addGap(18, 18, 18)
                .addComponent(colorSettingsBtn)
                .addGap(18, 18, 18)
                .addComponent(clrTablesBtn)
                .addGap(18, 18, 18)
                .addComponent(printInvtBtn)
                .addGap(18, 18, 18)
                .addComponent(printSalesBtn)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("mainFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                mainFrameWindowClosing(evt);
            }
        });

        titleLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLbl.setText("INVENTORY MANAGEMENT SYSTEM");

        searchTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchTF.setToolTipText("Search for entries in displayed table. Empty search resets table.");
        searchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTFActionPerformed(evt);
            }
        });
        searchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTFKeyPressed(evt);
            }
        });

        invtInputs.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        invtInputs.setRequestFocusEnabled(false);

        nameLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nameLbl.setText("Name:");

        nameTF.setToolTipText("Name of item");
        nameTF.setName("name"); // NOI18N

        categoryLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        categoryLbl.setText("Category:");

        categoryTF.setToolTipText("Category for item (e.g. Home decor)");
        categoryTF.setName("category"); // NOI18N

        supplierLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        supplierLbl.setText("Supplier:");

        supplierTF.setToolTipText("Name of supplier (e.g. HomeGoods)");

        conditionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        conditionLabel.setText("Condition:");

        condCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "New", "Like New", "Good", "Fair", "Poor" }));

        quantityLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        quantityLbl.setText("Total Quantity:");

        totalQtyTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        totalQtyTF.setToolTipText("Avaulable number of item");

        originalPriceLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        originalPriceLbl.setText("Original Price:");

        origPriceTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        origPriceTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        origPriceTF.setToolTipText("Amount item was purchased for ($)");
        origPriceTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                origPriceTFFocusLost(evt);
            }
        });

        purchaseDateLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        purchaseDateLbl.setText("Purchasing Date:");

        purchaseDC.setToolTipText("Date item was purchased on");
        purchaseDC.setDateFormatString("M/d/y");
        purchaseDC.setMaxSelectableDate(new java.util.Date(253370786489000L));
        purchaseDC.setMinSelectableDate(new java.util.Date(-62135747911000L));

        sellingDateLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sellingDateLbl.setText("Selling Date:");

        sellingDC.setDateFormatString("M/d/y");

        addItemBtn.setText("Add");
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertItemSQL(evt);
            }
        });

        updtItemBtn.setText("Update");
        updtItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updtInvtSQL(evt);
            }
        });

        delItemBtn.setText("Delete Entry");
        delItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delInvtSQL(evt);
            }
        });

        selectIDLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        selectIDLbl.setText("Select ID:");

        selIDCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selIDCBSelected(evt);
            }
        });

        javax.swing.GroupLayout selItemIDPnlLayout = new javax.swing.GroupLayout(selItemIDPnl);
        selItemIDPnl.setLayout(selItemIDPnlLayout);
        selItemIDPnlLayout.setHorizontalGroup(
            selItemIDPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selItemIDPnlLayout.createSequentialGroup()
                .addComponent(selectIDLbl)
                .addGap(35, 35, 35)
                .addComponent(selIDCB, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        selItemIDPnlLayout.setVerticalGroup(
            selItemIDPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selItemIDPnlLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(selItemIDPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectIDLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selIDCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout invtInputsLayout = new javax.swing.GroupLayout(invtInputs);
        invtInputs.setLayout(invtInputsLayout);
        invtInputsLayout.setHorizontalGroup(
            invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invtInputsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selItemIDPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(invtInputsLayout.createSequentialGroup()
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(originalPriceLbl))
                        .addGap(18, 18, 18)
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(origPriceTF, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(nameTF))
                        .addGap(68, 68, 68)
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(purchaseDateLbl)
                            .addComponent(categoryLbl))
                        .addGap(18, 18, 18)
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(categoryTF)
                            .addComponent(purchaseDC, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addGap(68, 68, 68)
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(supplierLbl)
                            .addComponent(sellingDateLbl))
                        .addGap(18, 18, 18)
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sellingDC, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(supplierTF))
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(invtInputsLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(conditionLabel)
                                .addGap(18, 18, 18)
                                .addComponent(condCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(quantityLbl)
                                .addGap(18, 18, 18)
                                .addComponent(totalQtyTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(invtInputsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(delItemBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updtItemBtn)
                                .addGap(0, 0, 0)
                                .addComponent(addItemBtn)))))
                .addGap(30, 30, 30))
        );
        invtInputsLayout.setVerticalGroup(
            invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invtInputsLayout.createSequentialGroup()
                .addComponent(selItemIDPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierLbl)
                    .addComponent(supplierTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryLbl)
                    .addComponent(categoryTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conditionLabel)
                    .addComponent(quantityLbl)
                    .addComponent(nameLbl)
                    .addComponent(condCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalQtyTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invtInputsLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(invtInputsLayout.createSequentialGroup()
                                .addComponent(sellingDateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(1, 1, 1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(purchaseDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(originalPriceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(origPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(invtInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addItemBtn)
                                .addComponent(updtItemBtn)
                                .addComponent(delItemBtn))))
                    .addGroup(invtInputsLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(purchaseDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(invtInputsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(sellingDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        saleInputs.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        saleInputs.setPreferredSize(new java.awt.Dimension(1319, 164));

        itemIDLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        itemIDLabel.setText("Invt. Item ID:");

        selItemIDBtn.setText("Select");
        selItemIDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selItemIDBtnSelected(evt);
            }
        });

        custNameLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        custNameLbl.setText("Customer Name:");

        custNameTF.setToolTipText("Name or username of customer");

        platformLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        platformLbl.setText("Platform:");

        platformTF.setToolTipText("Application used to sell item to customer");

        saleSellingSDLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        saleSellingSDLbl.setText("Selling Date:");

        saleSellingDC.setToolTipText("Date item was sold to customer on");
        saleSellingDC.setDateFormatString("M/d/y");

        sellFeesLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sellFeesLbl.setText("Selling Fees:");

        sellFeesTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        sellFeesTF.setToolTipText("Fees for selling ");
        sellFeesTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sellFeesTFFocusLost(evt);
            }
        });

        processFeesLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        processFeesLbl.setText("Processing Fees:");

        processFeesTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        processFeesTF.setToolTipText("Fees for processing item ");
        processFeesTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                processFeesTFFocusLost(evt);
            }
        });

        shipFeesLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        shipFeesLbl.setText("Shipping Fees:");

        shipFeesTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        shipFeesTF.setToolTipText("Fees for shipping item");
        shipFeesTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                shipFeesTFFocusLost(evt);
            }
        });

        addSaleBtn.setText("Add");
        addSaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertSaleSQL(evt);
            }
        });

        updtSaleBtn.setText("Update");
        updtSaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updtSaleSQL(evt);
            }
        });

        delSaleBtn.setText("Delete Entry");
        delSaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delSaleSQL(evt);
            }
        });

        saleSelIDLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        saleSelIDLbl.setText("Select Sale ID:");

        selSaleIDCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selSaleIDCBSelected(evt);
            }
        });

        javax.swing.GroupLayout selSaleIDPnlLayout = new javax.swing.GroupLayout(selSaleIDPnl);
        selSaleIDPnl.setLayout(selSaleIDPnlLayout);
        selSaleIDPnlLayout.setHorizontalGroup(
            selSaleIDPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selSaleIDPnlLayout.createSequentialGroup()
                .addComponent(saleSelIDLbl)
                .addGap(18, 18, 18)
                .addComponent(selSaleIDCB, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        selSaleIDPnlLayout.setVerticalGroup(
            selSaleIDPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selSaleIDPnlLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(selSaleIDPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saleSelIDLbl)
                    .addComponent(selSaleIDCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        sellingPriceLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sellingPriceLbl.setText("Selling Price:");

        qtySoldLbl.setText("Quantity Sold:");

        qtySoldTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        qtySoldTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                qtySoldTFFocusLost(evt);
            }
        });

        sellingPriceTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        sellingPriceTF.setToolTipText("Amount each item was sold for ($)");
        sellingPriceTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sellingPriceTFFocusLost(evt);
            }
        });

        itemIDTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        itemIDTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                itemIDTFFocusLost(evt);
            }
        });

        javax.swing.GroupLayout saleInputsLayout = new javax.swing.GroupLayout(saleInputs);
        saleInputs.setLayout(saleInputsLayout);
        saleInputsLayout.setHorizontalGroup(
            saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saleInputsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selSaleIDPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(saleInputsLayout.createSequentialGroup()
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemIDLabel)
                            .addComponent(sellFeesLbl))
                        .addGap(18, 18, 18)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(saleInputsLayout.createSequentialGroup()
                                .addComponent(itemIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selItemIDBtn))
                            .addComponent(sellFeesTF))
                        .addGap(44, 44, 44)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(processFeesLbl)
                            .addComponent(custNameLbl))
                        .addGap(18, 18, 18)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(custNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(processFeesTF, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shipFeesLbl)
                            .addComponent(platformLbl))
                        .addGap(18, 18, 18)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shipFeesTF, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(platformTF))
                        .addGap(44, 44, 44)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qtySoldLbl)
                            .addComponent(saleSellingSDLbl))
                        .addGap(18, 18, 18)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saleSellingDC, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(qtySoldTF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(saleInputsLayout.createSequentialGroup()
                                .addComponent(sellingPriceLbl)
                                .addGap(14, 14, 14)
                                .addComponent(sellingPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(saleInputsLayout.createSequentialGroup()
                                .addComponent(delSaleBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updtSaleBtn)
                                .addGap(0, 0, 0)
                                .addComponent(addSaleBtn)))))
                .addGap(30, 30, 30))
        );
        saleInputsLayout.setVerticalGroup(
            saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saleInputsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(selSaleIDPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selItemIDBtn)
                    .addComponent(itemIDLabel)
                    .addComponent(custNameLbl)
                    .addComponent(custNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtySoldTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(platformLbl)
                    .addComponent(platformTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sellingPriceLbl)
                    .addComponent(qtySoldLbl)
                    .addComponent(sellingPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delSaleBtn)
                            .addComponent(updtSaleBtn)
                            .addComponent(addSaleBtn))
                        .addComponent(saleSellingDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saleInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saleSellingSDLbl)
                        .addComponent(shipFeesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(shipFeesLbl)
                        .addComponent(processFeesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(processFeesLbl)
                        .addComponent(sellFeesLbl)
                        .addComponent(sellFeesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        tabbedPnl.setToolTipText("");
        tabbedPnl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tabbedPnl.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPnlStateChanged(evt);
            }
        });

        invtTable.setAutoCreateRowSorter(true);
        invtTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        invtTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Category", "Supplier", "Condition", "Available Quantity", "Original Price", "Profit", "ROI (%)", "Purchase Date", "Latest Selling Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invtTable.setFillsViewportHeight(true);
        invtTable.setName("inventory"); // NOI18N
        invtTable.setShowGrid(true);
        invtTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                invtTableFocusLost(evt);
            }
        });
        invtSP.setViewportView(invtTable);
        invtTable.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout invtPnlLayout = new javax.swing.GroupLayout(invtPnl);
        invtPnl.setLayout(invtPnlLayout);
        invtPnlLayout.setHorizontalGroup(
            invtPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invtPnlLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(invtSP, javax.swing.GroupLayout.DEFAULT_SIZE, 1451, Short.MAX_VALUE))
        );
        invtPnlLayout.setVerticalGroup(
            invtPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(invtSP, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );

        tabbedPnl.addTab("Inventory", invtPnl);

        salesTable.setAutoCreateRowSorter(true);
        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Customer Name", "Item Name", "Platform", "Quantity Sold", "Selling Price", "Selling Fees", "Processing Fees", "Shipping Fees", "Selling Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salesTable.setFillsViewportHeight(true);
        salesTable.setName("sales"); // NOI18N
        salesTable.setShowGrid(true);
        salesTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                salesTableFocusLost(evt);
            }
        });
        saleSP.setViewportView(salesTable);
        if (salesTable.getColumnModel().getColumnCount() > 0) {
            salesTable.getColumnModel().getColumn(3).setMinWidth(150);
            salesTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            salesTable.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        javax.swing.GroupLayout salePnlLayout = new javax.swing.GroupLayout(salePnl);
        salePnl.setLayout(salePnlLayout);
        salePnlLayout.setHorizontalGroup(
            salePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saleSP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1451, Short.MAX_VALUE)
        );
        salePnlLayout.setVerticalGroup(
            salePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saleSP, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );

        tabbedPnl.addTab("Sales", salePnl);

        addEntryBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addEntryBtn.setText("Add");
        addEntryBtn.setToolTipText("Add entry to current table");
        addEntryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEntryBtnClicked(evt);
            }
        });

        editEntryBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        editEntryBtn.setText("Edit");
        editEntryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEntryBtnClicked(evt);
            }
        });

        settingsBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        settingsBtn.setText("Settings");
        settingsBtn.setToolTipText("Settings");
        settingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsBtnClicked(evt);
            }
        });

        analysisBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        analysisBtn.setText("Analysis");
        analysisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisBtnClicked(evt);
            }
        });

        searchBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.setToolTipText("");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saleInputs, javax.swing.GroupLayout.DEFAULT_SIZE, 1451, Short.MAX_VALUE)
                    .addComponent(invtInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(titleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchTF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addEntryBtn)
                        .addGap(51, 51, 51)
                        .addComponent(editEntryBtn)
                        .addGap(50, 50, 50)
                        .addComponent(analysisBtn)
                        .addGap(50, 50, 50)
                        .addComponent(settingsBtn))
                    .addComponent(tabbedPnl))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingsBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(analysisBtn)
                        .addComponent(editEntryBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addEntryBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchTF)
                            .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invtInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saleInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPnl)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reset components respective to add button click. If "Add" is clicked, the opened JTable
     * corresponding inputs are opened. In addition, the button text will change to "Cancel Add". If
     * "Cancel Add" is clicked, inputs are hidden and the button text will change to "Add".
     *
     * @param ActionEvent event occurring from button click
     */
    private void addEntryBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEntryBtnClicked
        if (editEntryBtn.getText().equals("Cancel Edit")) {
            // Resetting edit (inputs were open) 
            setEditClosedBtns();
            editEntryBtn.setText("Edit");
        }

        boolean isAdd = addEntryBtn.getText().equals("Add");
        Component[] inputs;

        if (tabbedPnl.getSelectedComponent() == invtPnl) {
            // open or close item inputs
            invtInputs.setVisible(isAdd);
            inputs = getInvtInputCompts();
        } else {
            // open or close sale inputs
            saleInputs.setVisible(isAdd);
            inputs = getSaleInputCompts();
        }

        addEntryBtn.setText(isAdd ? "Cancel Add" : "Add");

        // Clear and re-enabled inputs in case of switches between edit or add
        mainHelpers.clearInputValues(inputs);
        setInputsEnabled(true);
    }//GEN-LAST:event_addEntryBtnClicked

    /**
     * This method is used to insert into the inventory SQL table.
     *
     * @param evt Event from clicking the add item button
     */
    private void insertItemSQL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertItemSQL
        Object[] values = mainHelpers.getInvtInputComptsValues(getInvtInputCompts(),
                invtTable.getRowCount() + 1);
        String pd = (String) values[9], sd = (String) values[10];

        if (mainHelpers.verifyInvtInputVals((String) values[1], pd, sd)) {
            // Insertion of inputs as a record into sqlite database
            try (PreparedStatement stmt = con.prepareStatement(
                    "INSERT INTO inventory VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")) {
                mainSQLHelpers.setInvtSQLFields(stmt, values);
                stmt.executeUpdate();
                stmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Item insert failed",
                        "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //Insert item into inventory JTable
            mainHelpers.insertItemIntoJTable(values, sd);
        }
    }//GEN-LAST:event_insertItemSQL

    /**
     * Clears value from origPriceTF if it is not valid.
     *
     * @param evt Event occurring from text field losing focus
     */
    private void origPriceTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_origPriceTFFocusLost
        mainHelpers.clearTFValue(origPriceTF);
    }//GEN-LAST:event_origPriceTFFocusLost

    /**
     * Clears value sellingPriceTF if it is not valid.
     *
     * @param evt Event occurring from text field losing focus
     */
    private void sellingPriceTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sellingPriceTFFocusLost
        mainHelpers.clearTFValue(sellingPriceTF);
    }//GEN-LAST:event_sellingPriceTFFocusLost

    /**
     * Set up for when edit button clicked.
     *
     * @param evt Event occurring from edit button being clicked
     */
    private void editEntryBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEntryBtnClicked
        Component[] inputs = (tabbedPnl.getSelectedComponent() == invtPnl)
                ? getInvtInputCompts() : getSaleInputCompts();

        mainHelpers.clearInputValues(inputs);

        // Reset add button text
        if (addEntryBtn.getText().equals("Cancel Add")) {
            addEntryBtn.setText("Add");
        }

        if (editEntryBtn.getText().equals("Edit")) {
            // Open edit compts
            setEditOpenedBtns();
            setInputsEnabled(false);
            editEntryBtn.setText("Cancel Edit");
        } else {
            // Close edit compts
            setEditClosedBtns();
            setInputsEnabled(true);
            editEntryBtn.setText("Edit");
        }
    }//GEN-LAST:event_editEntryBtnClicked

    /**
     * Set up for selected item id
     *
     * @param evt Event occurring from item id being selected (edit)
     */
    private void selIDCBSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selIDCBSelected
        mainHelpers.clearInputValues(getInvtInputCompts());

        if (selIDCB.getSelectedItem() != null) {
            setSelBtnCtrls(true, delItemBtn, updtItemBtn);

            int id = invtTable.convertRowIndexToModel(
                    Integer.parseInt(selIDCB.getSelectedItem().toString()) - 1), col = 1;
            Object val;

            for (Component c : getInvtInputCompts()) {
                if ((val = invtTable.getValueAt(id, col)) != null) {
                    try {
                        mainHelpers.setValuesInvtInputs(c, col, val);
                    } catch (ParseException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                col = (col == 6) ? col + 3 : col + 1;
            }
        } else {
            setSelBtnCtrls(false, delItemBtn, updtItemBtn);
        }
    }//GEN-LAST:event_selIDCBSelected

    /**
     * Opens popupJF in order to choose row from clone table.
     *
     * @param evt Event occurring from select sale id button being clicked(edit)
     */
    private void selItemIDBtnSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selItemIDBtnSelected
        popupJF.pack();
        popupJF.setVisible(true);
    }//GEN-LAST:event_selItemIDBtnSelected

    /**
     * Set actions after the analysis frame is closed.
     *
     * @param evt Event occurring popup select button being clicked
     */
    private void puSelIDBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puSelIDBtnClicked
        itemIDTF.setText(puItemIDTF.getText());
        popupJF.setVisible(false);
    }//GEN-LAST:event_puSelIDBtnClicked

    /**
     * This method is used to insert into the sales SQL table.
     *
     * @param evt Event from clicking the add sale button
     */
    private void insertSaleSQL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertSaleSQL
        Object[] salesFields = mainHelpers.getSalesInputComptsValues(getSaleInputCompts(),
                salesTable.getRowCount() + 1);
        String sd = (String) salesFields[9];

        if (mainHelpers.verifySalesInputVals((Integer) salesFields[2], sd)) {
            try (PreparedStatement stmt = con.prepareStatement(
                    "INSERT INTO sales VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")) {
                mainSQLHelpers.setFieldsSalesSQL(stmt, salesFields);
                stmt.executeUpdate();
                stmt.close();

                mainHelpers.insertSalesIntoJTable(salesFields, sd);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);

                JOptionPane.showMessageDialog(null, "Sale insert failed",
                        "Error Message", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_insertSaleSQL

    /**
     * Update entry in the sales SQL table.
     *
     * @param evt Event from clicking the update sales button
     */
    private void updtSaleSQL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updtSaleSQL
        int saleID = Integer.valueOf(selSaleIDCB.getSelectedItem().toString());
        Object[] inputs = mainHelpers.getSalesInputComptsValues(getSaleInputCompts(), saleID);
        Integer itemID = (Integer) inputs[2];
        String sd = (String) inputs[8];

        if (mainHelpers.verifySalesInputVals(itemID, sd)) {
            int rowIndx = mainHelpers.locateTableIDRow((DefaultTableModel) salesTable.getModel(),
                    saleID);

            try (PreparedStatement stmt = con.prepareStatement(
                    "UPDATE sales SET (id, name, item_id, platform, qty_sold, selling_price, "
                    + "shipping_fees, processing_fees, selling_fees, selling_date) = "
                    + "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?) WHERE id = ?")) {
                mainSQLHelpers.setFieldsSalesSQL(stmt, inputs);
                stmt.setInt(11, saleID);
                stmt.executeUpdate();
                stmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Sale insert failed", "Error Message",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Setting year in invt table
            setInvtSDToSalesSD((String) inputs[9], Integer.valueOf(itemID), rowIndx);

            // Update row in JTable
            inputs[2] = invtTable.getValueAt((int) inputs[2] - 1, 1);

            for (int i = 0; i < salesTable.getColumnCount(); i++) {
                salesTable.setValueAt(inputs[i], rowIndx, i);
            }

            mainHelpers.clearInputValues(getSaleInputCompts());
            selSaleIDCB.setSelectedIndex(0);
        }
    }//GEN-LAST:event_updtSaleSQL

    /**
     * Delete entry in the sales SQL table.
     *
     * @param evt Event from clicking the delete sale button
     */
    private void delSaleSQL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delSaleSQL
        try (PreparedStatement stmt = con.prepareStatement("DELETE FROM sales WHERE id = ?")) {
            int id = Integer.parseInt(selSaleIDCB.getSelectedItem().toString());
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String year = (String) salesTable.getValueAt(id - 1, 9), sd = saleSellingDC.getDate() == null
                    ? null : sdf.format(saleSellingDC.getDate());

            ((DefaultTableModel) salesTable.getModel()).removeRow(id - 1);

            if (mainSQLHelpers.selectMaxSaleSDSQL(itemIDTF) != null && sd != null
                    && mainSQLHelpers.selectMaxSaleSDSQL(itemIDTF).compareTo(sd) != 0) {
                invtTable.setValueAt(mainSQLHelpers.selectMaxSaleSDSQL(itemIDTF),
                        Integer.valueOf(itemIDTF.getText()) - 1, 10);
            }

            if (year != null && !mainSQLHelpers.selectYearSQL(year.substring(0, 4))) {
                analysisYrCB.setEnabled(false);
                analysisYrCB.removeItem(year.substring(0, 4));
                analysisYrCB.setEnabled(true);
            }

            mainSQLHelpers.updtIDCountSQL(salesTable, id, salesTable.getRowCount());
            mainHelpers.clearInputValues(getSaleInputCompts());

            selSaleIDCB.removeItemAt(selSaleIDCB.getItemCount() - 1);
            selSaleIDCB.setSelectedIndex(0);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error while deleting sale from table.",
                    "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_delSaleSQL

    /**
     * Select sale ID
     *
     * @param evt Event from selecting item from JComboBox
     */
    private void selSaleIDCBSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selSaleIDCBSelected
        mainHelpers.clearInputValues(getSaleInputCompts());

        if (selSaleIDCB.getSelectedItem() != null) {
            setSelBtnCtrls(true, delSaleBtn, updtSaleBtn);
            setInputsEnabled(true);

            int id = salesTable.convertRowIndexToModel(
                    Integer.parseInt(selSaleIDCB.getSelectedItem().toString()) - 1), col = 1;

            String itemID = null;
            Object val;

            try {
                itemID = mainSQLHelpers.selectItemIDSaleSQL(id + 1);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error retrieving item ID.",
                        "Error Message", JOptionPane.ERROR_MESSAGE);
            }

            for (Component c : getSaleInputCompts()) {
                val = (col != 2 ? salesTable.getValueAt(id, col)
                        : itemID);

                if (val != null) {
                    try {
                        mainHelpers.setValuesSaleInputs(c, col, val);
                    } catch (ParseException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                col++;
            }
        } else {
            setSelBtnCtrls(false, delSaleBtn, updtSaleBtn);
            setInputsEnabled(false);
        }
    }//GEN-LAST:event_selSaleIDCBSelected

    private void tabbedPnlStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPnlStateChanged

        if (tabbedPnl.getSelectedComponent() == invtPnl) {
            saleInputs.setVisible(false);

            if (selItemIDPnl.isVisible()) {
                selItemIDPnl.setVisible(false);
                delItemBtn.setVisible(false);
                updtItemBtn.setVisible(false);
                addItemBtn.setVisible(true);
            }
        } else if (tabbedPnl.getSelectedComponent() == salePnl) {
            invtInputs.setVisible(false);

            if (selSaleIDPnl.isVisible()) {
                selSaleIDPnl.setVisible(false);
                delSaleBtn.setVisible(false);
                updtSaleBtn.setVisible(false);
                addSaleBtn.setVisible(true);
                selItemIDBtn.setEnabled(true);
            }
        }

        addEntryBtn.setText("Add");
        editEntryBtn.setText("Edit");
    }//GEN-LAST:event_tabbedPnlStateChanged

    /**
     * Inventory table lost focus, unselect selected rows
     *
     * @param evt Event from losing focus from inventory table
     */
    private void invtTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_invtTableFocusLost
        invtTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_invtTableFocusLost

    /**
     * Delete entry in the inventory SQL table.
     *
     * @param evt Event from clicking the delete item button
     */
    private void delInvtSQL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delInvtSQL
        try (PreparedStatement stmt = con.prepareStatement("DELETE FROM inventory WHERE id = ?")) {
            int id = Integer.parseInt(selIDCB.getSelectedItem().toString());
            stmt.setInt(1, id);
            stmt.executeUpdate();
            stmt.close();

            String year = (String) invtTable.getValueAt(id - 1, 10);

            if (year != null && !mainSQLHelpers.selectYearSQL(year)) {
                analysisYrCB.setEnabled(false);
                analysisYrCB.removeItem(year.substring(0, 4));
                analysisYrCB.setEnabled(true);
            }

            ((DefaultTableModel) invtTable.getModel()).removeRow(id - 1);

            mainSQLHelpers.updtIDCountSQL(invtTable, id, invtTable.getRowCount());

            mainHelpers.clearInputValues(getInvtInputCompts());

            selIDCB.removeItemAt(selIDCB.getItemCount() - 1);
            selIDCB.setSelectedIndex(0);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error while deleting item from table",
                    "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_delInvtSQL

    /**
     * Update entry in the inventory SQL table.
     *
     * @param evt Event from clicking the update item button
     */
    private void updtInvtSQL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updtInvtSQL
        int selectItemID = Integer.valueOf((String) selIDCB.getSelectedItem()),
                rowIndx = mainHelpers.locateTableIDRow(
                        (DefaultTableModel) invtTable.getModel(), selectItemID);
        Object[] invtFields = mainHelpers.getInvtInputComptsValues(getInvtInputCompts(), selectItemID);
        String pd = (String) invtFields[9], sd = (String) invtFields[10];

        if (mainHelpers.verifyInvtInputVals((String) invtFields[1], pd, sd)) {
            try (PreparedStatement stmt = con.prepareStatement(
                    "UPDATE inventory SET (id, product_name, category, "
                    + "supplier, condition, qty, original_price, profit, roi, "
                    + "purchase_date, selling_date) = "
                    + "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) WHERE id = ?")) {
                mainSQLHelpers.setInvtSQLFields(stmt, invtFields);
                stmt.setInt(12, selectItemID);
                stmt.executeUpdate();
                stmt.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Item update failed",
                        "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update row in JTable
            for (int i = 0; i < invtTable.getColumnCount(); i++) {
                invtTable.setValueAt(invtFields[i], rowIndx, i);
            }

            if (invtTable.getValueAt(rowIndx, 10) != null) {
                mainHelpers.updtRowSellingYr(
                        invtTable.getValueAt(rowIndx, 10).toString().substring(0, 4), sd);
            }

            mainHelpers.clearInputValues(getInvtInputCompts());
            selIDCB.setSelectedIndex(0);
        }
    }//GEN-LAST:event_updtInvtSQL

    /**
     * Open settings dialog. <br>
     * Options presented are: <br>
     * - Color Settings<br>
     * - Clear Tables<br>
     * - Print Inventory Table<br>
     * - Print Sales Table
     *
     * @param evt Event from clicking the settings button
     */
    private void settingsBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsBtnClicked
        settingsDialog.pack();
        settingsDialog.setLocationRelativeTo(null);
        settingsDialog.setVisible(true);
    }//GEN-LAST:event_settingsBtnClicked

    /**
     * Open analysis frame which displays the total count of available items and profits. Also, a
     * category/sales bar graph, profit/ROI line-bar graph, platforms pie graph, and a fees triple
     * bar graph based on the year selected from the JComboBox within the frame.
     *
     * @param evt Event from clicking the analysis button
     */
    private void analysisBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisBtnClicked
        if (analysisYrCB.getSelectedItem() != null) {

            String year = analysisYrCB.getSelectedItem().toString();

            // Bar graph of most common category across months for given year
            acHelpers.createCategoryBarGraph(catBarGraphPnl, year);

            // Bar graph of sales made monthly for the given year
            DefaultCategoryDataset salesChart = acHelpers.createSalesBarGraph(salesBarPnl, year);

            // Line/Bar graph of profit/roi across months for the given year
            acHelpers.createProfitROIGraph(profitROIPnl, salesChart, year);

            // Piechart of platforms used in sales across the given year
            acHelpers.createPlatformPieChart(platformPnl, year);

            // Triple bar graph of fees used across months for the given year
            acHelpers.createFeesChart(feesPnl, year);

            try {
                setAnalysisLabels();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error while calcuating total "
                        + "item count and profit.", "Error Message",
                        JOptionPane.ERROR_MESSAGE);
            }

            analysisJF.setVisible(true);
            analysisJF.setLocationRelativeTo(null);
        } else {
            JOptionPane.showMessageDialog(null, "Cannot analyze data, no selling dates listed",
                    "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analysisBtnClicked

    /**
     * Select a year to analysis data from using the JComboBox in the analysis JFrame.
     *
     * @param evt Event from selecting from the analysis JComboBox
     */
    private void analysisYrCBChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisYrCBChosen
        if (analysisYrCB.getItemCount() != 0
                && analysisYrCB.isEnabled()) {
            // Reset in case of previous viewing
            totItemsLbl.setText("Total Available Items Quantity:");
            totProfitsLbl.setText("Total Profits:");

            if (catBarGraphPnl.getComponentCount() != 0) {
                catBarGraphPnl.remove(0);
            }

            if (salesBarPnl.getComponentCount() != 0) {
                salesBarPnl.remove(0);
            }

            if (profitROIPnl.getComponentCount() != 0) {
                profitROIPnl.remove(0);
            }

            if (platformPnl.getComponentCount() != 0) {
                platformPnl.remove(0);
            }

            if (feesPnl.getComponentCount() != 0) {
                feesPnl.remove(0);
            }

            analysisBtnClicked(null);
            analysisJF.repaint();
        }
    }//GEN-LAST:event_analysisYrCBChosen

    /**
     * Displays search results as value search for and enter button clicked.
     *
     * @param evt Event from pressing keys
     */
    private void searchTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTFKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchBtnClicked(null);
        }
    }//GEN-LAST:event_searchTFKeyPressed

    /**
     * Displays search results as value search for and search button clicked.
     *
     * @param evt Event from clicking search button
     */
    private void searchBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnClicked
        if (tabbedPnl.getSelectedComponent() == invtPnl) {
            mainHelpers.searchInventory(searchTF.getText().toLowerCase());
        } else {
            mainHelpers.searchSales(searchTF.getText().toLowerCase());
        }
    }//GEN-LAST:event_searchBtnClicked

    /**
     * Displays print prompt to print out the analysis JFrame.
     *
     * @param evt Event from clicking the print button in the analysis JFrame.
     */
    private void printAnalysisBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printAnalysisBtnClicked
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        printerJob.setJobName("Printer for Analysis");

        mainHelpers.setUpPrintJob(printerJob);

        if (printerJob.printDialog()) {
            try {
                printerJob.print();
            } catch (PrinterException ex) {
                Logger.getLogger(MainFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_printAnalysisBtnClicked

    /**
     * Sales table lost focus, unselect selected rows
     *
     * @param evt Event from losing focus from sales table
     */
    private void salesTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_salesTableFocusLost
        salesTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_salesTableFocusLost

    /**
     * Clear value from qtySoldTF if value is invalid
     *
     * @param evt Event from losing focus from qtySoldTF
     */
    private void qtySoldTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtySoldTFFocusLost
        if (!qtySoldTF.isEditValid()) {
            // Clear invalid value
            qtySoldTF.setValue(null);
        }
    }//GEN-LAST:event_qtySoldTFFocusLost

    /**
     * Clear value from sellFeesTF if value is invalid
     *
     * @param evt Event from losing focus from sellFeesTF
     */
    private void sellFeesTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sellFeesTFFocusLost
        if (!sellFeesTF.isEditValid()) {
            // Clear invalid value
            sellFeesTF.setValue(null);
        }
    }//GEN-LAST:event_sellFeesTFFocusLost

    /**
     * Clear value from processFeesTF if value is invalid
     *
     * @param evt Event from losing focus from processFeesTF
     */
    private void processFeesTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_processFeesTFFocusLost
        mainHelpers.clearTFValue(processFeesTF);
    }//GEN-LAST:event_processFeesTFFocusLost

    /**
     * Clear value from shipFeesTF if value is invalid
     *
     * @param evt Event from losing focus from shipFeesTF
     */
    private void shipFeesTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_shipFeesTFFocusLost
        mainHelpers.clearTFValue(shipFeesTF);
    }//GEN-LAST:event_shipFeesTFFocusLost

    /**
     * Clear value from itemIDTF if value is invalid
     *
     * @param evt Event from losing focus from itemIDTF
     */
    private void itemIDTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemIDTFFocusLost
        if (!itemIDTF.isEditValid() || itemIDTF.getText().trim().isEmpty()) {
            itemIDTF.setValue(null);
        } else {
            String sd;

            int selRow = Integer.valueOf(itemIDTF.getText()) - 1;

            if ((sd = (String) invtTable.getValueAt(selRow, 10)) != null) {
                try {
                    saleSellingDC.setDate(
                            new SimpleDateFormat("yyyy-MM-dd").
                                    parse(sd));
                } catch (ParseException ex) {
                    Logger.getLogger(MainFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_itemIDTFFocusLost

    /**
     * Opens JColorChooser dialog and applies color if color is chosen
     *
     * @param evt Event from clicking color settings button (button in settings)
     */
    private void colorSettingsBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSettingsBtnClicked
        Color color = JColorChooser.showDialog(
                null,
                "Colors",
                null,
                false);

        if (color != null) {
            setColor(color);
        }
    }//GEN-LAST:event_colorSettingsBtnClicked

    /**
     * Clear both inventory and sales tables data
     *
     * @param evt Event from clicking clear tables button (button in settings)
     */
    private void clrTablesBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clrTablesBtnClicked
        if (JOptionPane.showConfirmDialog(null, "Clear both tables?") == 0) {
            try {
                mainSQLHelpers.clearTableSQL(invtTable, selIDCB);
                mainSQLHelpers.clearTableSQL(salesTable, selIDCB);
                JOptionPane.showMessageDialog(null,
                        "Tables successfully cleared");
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Unable to clear tables", "Error Message",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_clrTablesBtnClicked

    /**
     * Displays print prompt to print out the inventory table.
     *
     * @param evt Event from clicking the print inventory table button in the settings.
     */
    private void printInvtBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInvtBtnClicked
        try {
            invtTable.print();
        } catch (PrinterException ex) {
            Logger.getLogger(MainFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(new JFrame(), "Unable to print"
                    + "inventory table");
        }
    }//GEN-LAST:event_printInvtBtnClicked

    /**
     * Displays print prompt to print out the sales table.
     *
     * @param evt Event from clicking the print sales table button in the settings.
     */
    private void printSalesBtnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printSalesBtnClicked
        try {
            salesTable.print();
        } catch (PrinterException ex) {
            Logger.getLogger(MainFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(new JFrame(), "Unable to print"
                    + "sales table");
        }
    }//GEN-LAST:event_printSalesBtnClicked

    /**
     * Set actions after the analysis frame is closed.
     */
    private void analysisJFWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_analysisJFWindowClosing
        // When analysis is closed, the counters are reset
        totItemsLbl.setText("Total Available Items Quantity:");
        totProfitsLbl.setText("Total Profits:");
    }//GEN-LAST:event_analysisJFWindowClosing

    /**
     * Sets mouse listener to clone table. Single click gets row id and double click gets selected
     * row id and closes table.
     */
    private void cloneTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cloneTableMouseClicked
        int id = (Integer) clone.getModel().getValueAt(
                clone.convertRowIndexToModel(clone.getSelectedRow()), 0);
        String sd;

        if (evt.getClickCount() == 1) {

            puItemIDTF.setText(String.valueOf(id));
        } else if (evt.getClickCount() == 2) {
            itemIDTF.setText(String.valueOf(id));

            if ((sd = (String) invtTable.getValueAt(id - 1, 10)) != null) {
                try {
                    saleSellingDC.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(sd));
                } catch (ParseException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            popupJF.setVisible(false);
        }
    }//GEN-LAST:event_cloneTableMouseClicked

    private void mainFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_mainFrameWindowClosing
        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mainFrameWindowClosing

    private void searchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTFActionPerformed

    /**
     * This method is used to append all the unique years that appear in the inventory and sales
     * tables to the analysisYearCB.
     */
    private void setAllUniqueYears() {
        Set<Integer> years = new TreeSet<>(Collections.reverseOrder());

        // Get all unique years from inventory and sale tables
        getUniqueYrsFromTable(years, invtTable, 10);
        getUniqueYrsFromTable(years, salesTable, 9);

        // Disabled so when items are add to CB analysisFrame doesn't appear
        analysisYrCB.setEnabled(false);

        // Append all years to analysisYearCB
        years.forEach(item -> {
            analysisYrCB.addItem(item.toString());
        });

        analysisYrCB.setEnabled(true);
    }

    /**
     * Retrieve all unique selling date year values from invt and sale tables
     *
     * @param years Set containing all unique years
     * @param table table to iterate
     * @param colIndx column of selling date
     * @return Object array of fields from ResultSet
     */
    private Set<Integer> getUniqueYrsFromTable(Set<Integer> years, JTable table, int colIndx) {
        String yr;

        for (int i = 0; i < table.getRowCount(); i++) {
            if ((yr = (String) table.getValueAt(i, colIndx)) != null) {
                years.add(Integer.valueOf(yr.substring(0, 4)));
            }
        }
        return years;
    }

    /**
     * Set inputs enabled or disabled based on parameter value.
     *
     * @param isVisible flag to indicate if inputs are to be enabled or disabled
     */
    private void setInputsEnabled(Boolean isEnabled) {
        // Get input values depending on which table is being displayed
        Component[] inputs = (tabbedPnl.getSelectedComponent() == invtPnl)
                ? getInvtInputCompts() : getSaleInputCompts();

        for (Component c : inputs) {
            c.setEnabled(isEnabled);
        }
    }

    /**
     * Get the inventory input components
     *
     * @return Array of inventory input components
     */
    public Component[] getInvtInputCompts() {
        return new Component[]{
            nameTF,
            categoryTF,
            supplierTF,
            condCB,
            totalQtyTF,
            origPriceTF,
            purchaseDC,
            sellingDC
        };
    }

    /**
     * Get the sale input components
     *
     * @return Array of sale input components
     */
    public Component[] getSaleInputCompts() {
        return new Component[]{
            custNameTF,
            itemIDTF,
            platformTF,
            qtySoldTF,
            sellingPriceTF,
            sellFeesTF,
            processFeesTF,
            shipFeesTF,
            saleSellingDC
        };
    }

    /**
     * This method is used to add items to the inventory table using the values in the inventory
     * SQLite table.
     *
     * @param resSet SQL inventory table data set
     * @param table JTable to populate (respective to its SQLite table)
     * @throws java.sql.SQLException JDBC error occurred
     */
    public void addAllItems(ResultSet resSet, DefaultTableModel table)
            throws SQLException {
        selIDCB.addItem(null);

        while (resSet.next()) {
            table.addRow(getInvtResSetFields(resSet));
            selIDCB.addItem(String.valueOf(resSet.getInt(1)));
        }
    }

    /**
     * This method is used to add items to the sales table using the values in the sales SQLite
     * table.
     *
     * @param resSet SQL sales table data set
     * @param table JTable to populate (respective to its SQLite table)
     * @throws java.sql.SQLException JDBC error occurred
     */
    public void addAllSales(ResultSet resSet, DefaultTableModel table) throws SQLException {
        selSaleIDCB.addItem(null);

        while (resSet.next()) {
            table.addRow(getSaleResSetFields(resSet));
            selSaleIDCB.addItem(String.valueOf(resSet.getInt(1)));
        }
    }

    /**
     * This method is used to retrieve all the inventory fields from a ResultSet.<br>
     * NOTE: currency is stored as integers
     *
     * @param rs SQL sales table data set
     * @return Object array of fields from ResultSet
     * @throws java.sql.SQLException JDBC error occurred
     */
    public Object[] getInvtResSetFields(ResultSet rs) throws SQLException {
        return new Object[]{
            rs.getInt(1), // id
            rs.getString(2), // name
            rs.getString(3), // category
            rs.getString(4), // supplier
            rs.getString(5), // condition
            rs.getObject(6) == null ? null : rs.getInt(6), // total quantity          
            rs.getObject(7) == null ? null : rs.getInt(7) / 100.0, // original price
            rs.getObject(8) == null ? null : rs.getInt(8) / 100.0, // profit
            rs.getObject(9) == null ? null : rs.getDouble(9), //roi
            rs.getString(10), // purchase date
            rs.getString(11), // latest sellingF date
        };
    }

    /**
     * This method is used to retrieve all the sales fields from a ResultSet.<br>
     * NOTE: currency is stored as integers
     *
     * @param rs SQL sales table data set
     * @return Object array of fields from ResultSet
     * @throws java.sql.SQLException JDBC error occurred
     */
    public Object[] getSaleResSetFields(ResultSet rs) throws SQLException {
        return new Object[]{
            rs.getInt(1), // id
            rs.getString(2), // customer name
            rs.getObject(3) == null ? null : invtTable.getValueAt(rs.getInt(3) - 1, 1), // item name
            rs.getString(4), // platform
            rs.getObject(5) == null ? null : rs.getInt(5), // qty sold
            rs.getObject(6) == null ? null : rs.getInt(6) / 100.0, // selling price,
            rs.getObject(7) == null ? null : rs.getInt(7) / 100.0, // selling fees
            rs.getObject(8) == null ? null : rs.getInt(8) / 100.0, // processing fees
            rs.getObject(9) == null ? null : rs.getInt(9) / 100.0, // shipping fees
            rs.getString(10) // selling date
        };
    }

    /**
     * Set selling date in inventory to match corresponding sale selling date.
     *
     * @param sd Sales selling date
     * @param itemID Item ID number
     * @param rowIndx Item row index
     *
     */
    public void setInvtSDToSalesSD(String sd, int itemID, int rowIndx) {
        String yrPreUpdt, sdInvt = (String) invtTable.getValueAt(itemID - 1, 10);

        if (sd != null && (sdInvt == null || sd.compareTo(sdInvt) > 0)) {
            try {
                mainSQLHelpers.updtSDSQL(invtTable, itemID, sd);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Unable to update latest selling date.",
                        "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            invtTable.setValueAt(sd, itemID - 1, 10);
        }

        // Update value in invt JTable
        if ((yrPreUpdt = (String) invtTable.getValueAt(rowIndx, 10)) != null) {
            mainHelpers.updtRowSellingYr(yrPreUpdt.substring(0, 4), sd);
        }
    }

    /**
     * Set all fields to be empty
     */
    public void resetAllFields() {
        int idx = tabbedPnl.getSelectedIndex();

        Component[] inputs = (idx == 0) ? getInvtInputCompts() : getSaleInputCompts();
        if (!selItemIDPnl.isVisible()) {
            tabbedPnl.setSelectedComponent(tabbedPnl.getComponentAt(0));
        } else if (!selSaleIDPnl.isVisible()) {
            tabbedPnl.setSelectedComponent(tabbedPnl.getComponentAt(1));
        }

        mainHelpers.clearInputValues(inputs);

        setInputsEnabled(true);

        if (tabbedPnl.getSelectedIndex() != idx) {
            tabbedPnl.setSelectedComponent(tabbedPnl.getComponentAt(idx));
        }
    }

    /**
     * Set up components for opening edit inputs.
     */
    private void setEditOpenedBtns() {
        if (tabbedPnl.getSelectedComponent() == invtPnl) {
            // Edit opened for inventory
            selItemIDPnl.setVisible(true);
            invtInputs.setVisible(true);
            addItemBtn.setVisible(false);
            delItemBtn.setVisible(true);
            delItemBtn.setEnabled(false);
            updtItemBtn.setVisible(true);
            updtItemBtn.setEnabled(false);
        } else {
            // Edit opened for inventory
            selSaleIDPnl.setVisible(true);
            saleInputs.setVisible(true);
            addSaleBtn.setVisible(false);
            delSaleBtn.setVisible(true);
            delSaleBtn.setEnabled(false);
            selItemIDBtn.setVisible(true);
            selItemIDBtn.setEnabled(false);
            updtSaleBtn.setVisible(true);
            updtSaleBtn.setEnabled(false);
        }
    }

    /**
     * Set up components for closed edit inputs.
     */
    private void setEditClosedBtns() {
        if (tabbedPnl.getSelectedComponent() == invtPnl) {
            selIDCB.setSelectedItem(null);
            selItemIDPnl.setVisible(false);
            invtInputs.setVisible(false);
            delItemBtn.setVisible(false);
            updtItemBtn.setVisible(false);
            addItemBtn.setVisible(true);
        } else {
            selSaleIDCB.setSelectedItem(null);
            selSaleIDPnl.setVisible(false);
            saleInputs.setVisible(false);
            selItemIDBtn.setEnabled(true);
            delSaleBtn.setVisible(false);
            updtSaleBtn.setVisible(false);
            addSaleBtn.setVisible(true);
        }
    }

    /**
     * Set up select id buttons (delete, update, select id) to enabled or disenabled depending on
     * flag value.
     *
     * @param isEnabled indicator if buttons are enabled or disabled
     * @param delBtn delete button
     * @param updtBtn update button
     */
    private void setSelBtnCtrls(boolean isEnabled, JButton delBtn, JButton updtBtn) {
        setInputsEnabled(isEnabled);
        delBtn.setEnabled(isEnabled);
        updtBtn.setEnabled(isEnabled);

        if (delBtn == delSaleBtn) {
            // Sales has an additional button
            selItemIDBtn.setEnabled(isEnabled);
        }
    }

    /**
     * Calculates and sets the analysis label values. May throw SQLException if JDBC encounters an
     * error.
     *
     */
    private void setAnalysisLabels() throws SQLException {
        totItemsLbl.setText(totItemsLbl.getText() + " " + String.valueOf(mainSQLHelpers.selectTotalQtySumSQL()));

        totProfitsLbl.setText(totProfitsLbl.getText() + " "
                + new DecimalFormat("0.00").format(mainSQLHelpers.selectProfitSumSQL() / 100.0));
    }

    /**
     * Sets the color to the mainFrame and settings background. Also, stores color into
     * ColorPreferences node for future references.
     *
     * @param color Color to apply
     */
    private void setColor(Color color) {
        ColorPreferences cp = new ColorPreferences();
        cp.setColorPreference(color);

        // Apply color
        MainFrame.this.getContentPane().setBackground(color);
        settingsDialog.getContentPane().setBackground(color);
    }

//    public void setItemAnalysisYrCB(String item) {
//        analysisYrCB.
//    }
    /**
     * Retrieves the analysis Panel
     *
     * @return Analysis JPanel
     */
    public JPanel getAnalysisPnl() {
        return analysisPnl;
    }

    /**
     * Retrieves inventory select ID JComboBox
     *
     * @return Inventory select ID JComboBox
     */
    public JComboBox getSelIDCB() {
        return selIDCB;
    }

    /**
     * Retrieves sales select ID JComboBox
     *
     * @return Sales select ID JComboBox
     */
    public JComboBox getSelSalesIDCB() {
        return selSaleIDCB;
    }

    /**
     * Retrieves analysis select year JComboBox
     *
     * @return Analysis select year JComboBox
     */
    public JComboBox getAnalysisYrCB() {
        return analysisYrCB;
    }

    /**
     * Retrieves sales select item ID JButton
     *
     * @return Sales select item ID JButton
     */
    public JButton getSelItemIDBtn() {
        return selItemIDBtn;
    }

    /**
     * Retrieves sales item ID JFormattedTextField
     *
     * @return Sales item ID JFormattedTextField
     */
    public JFormattedTextField getItemIDTF() {
        return itemIDTF;
    }

    /**
     * Retrieves inventory total quantity JFormattedTextField
     *
     * @return Inventory total quantity JFormattedTextField
     */
    public JFormattedTextField getTotalQtyTF() {
        return totalQtyTF;
    }

    /**
     * Retrieves sales quantity sold JFormattedTextField
     *
     * @return Sales quantity sold JFormattedTextField
     */
    public JFormattedTextField getQtySoldTF() {
        return qtySoldTF;
    }

    /**
     * Retrieves inventory original price JFormattedTextField
     *
     * @return Inventory original price JFormattedTextField
     */
    public JFormattedTextField getOrigPriceTF() {
        return origPriceTF;
    }

    /**
     * Retrieves sales selling price JFormattedTextField
     *
     * @return Sales selling price JFormattedTextField
     */
    public JFormattedTextField getSellingPriceTF() {
        return sellingPriceTF;
    }

    /**
     * Retrieves sales selling fees JFormattedTextField
     *
     * @return Sales selling fees JFormattedTextField
     */
    public JFormattedTextField getSellFeesTF() {
        return sellFeesTF;
    }

    /**
     * Retrieves sales processing fees JFormattedTextField
     *
     * @return Sales processing fees JFormattedTextField
     */
    public JFormattedTextField getProcessFeesTF() {
        return processFeesTF;
    }

    /**
     * Retrieves sales shipping fees JFormattedTextField
     *
     * @return Sales shipping fees JFormattedTextField
     */
    public JFormattedTextField getShipFeesTF() {
        return shipFeesTF;
    }

    /**
     * Retrieves inventory purchase date JDateChooser
     *
     * @return Inventory purchase date JDateChooser
     */
    public JDateChooser getPurchaseDC() {
        return purchaseDC;
    }

    /**
     * Retrieves inventory selling date JDateChooser
     *
     * @return Inventory selling date JDateChooser
     */
    public JDateChooser getSellingDC() {
        return sellingDC;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException
                | IllegalAccessException
                | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MainFrame().setVisible(true);
            } catch (SQLException | FileNotFoundException | ParseException | BackingStoreException ex) {
                Logger.getLogger(MainFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEntryBtn;
    private javax.swing.JButton addItemBtn;
    private javax.swing.JButton addSaleBtn;
    private javax.swing.JButton analysisBtn;
    private javax.swing.JFrame analysisJF;
    private javax.swing.JPanel analysisPnl;
    private javax.swing.JScrollPane analysisSP;
    private javax.swing.JComboBox<String> analysisYrCB;
    private javax.swing.JPanel catBarGraphPnl;
    private javax.swing.JLabel categoryLbl;
    private javax.swing.JTextField categoryTF;
    private javax.swing.JTable clone;
    private javax.swing.JScrollPane cloneSP;
    private javax.swing.JButton clrTablesBtn;
    private javax.swing.JButton colorSettingsBtn;
    private javax.swing.JComboBox<String> condCB;
    private javax.swing.JLabel conditionLabel;
    private javax.swing.JLabel custNameLbl;
    private javax.swing.JTextField custNameTF;
    private javax.swing.JButton delItemBtn;
    private javax.swing.JButton delSaleBtn;
    private javax.swing.JButton editEntryBtn;
    private javax.swing.JPanel feesPnl;
    private javax.swing.JScrollPane invtCloneSP;
    private javax.swing.JPanel invtInputs;
    private javax.swing.JPanel invtPnl;
    private javax.swing.JScrollPane invtSP;
    private javax.swing.JTable invtTable;
    private javax.swing.JTable invtTableClone;
    private javax.swing.JLabel invtTitleLbl;
    private javax.swing.JLabel itemIDLabel;
    private javax.swing.JFormattedTextField itemIDTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTF;
    private javax.swing.JFormattedTextField origPriceTF;
    private javax.swing.JLabel originalPriceLbl;
    private javax.swing.JLabel platformLbl;
    private javax.swing.JPanel platformPnl;
    private javax.swing.JTextField platformTF;
    private javax.swing.JFrame popupJF;
    private javax.swing.JButton printAnalysisBtn;
    private javax.swing.JButton printInvtBtn;
    private javax.swing.JFrame printJF;
    private javax.swing.JPanel printPnl;
    private javax.swing.JButton printSalesBtn;
    private javax.swing.JLabel processFeesLbl;
    private javax.swing.JFormattedTextField processFeesTF;
    private javax.swing.JPanel profitROIPnl;
    private javax.swing.JTextField puItemIDTF;
    private javax.swing.JButton puSelIDBtn;
    private com.toedter.calendar.JDateChooser purchaseDC;
    private javax.swing.JLabel purchaseDateLbl;
    private javax.swing.JLabel qtySoldLbl;
    private javax.swing.JFormattedTextField qtySoldTF;
    private javax.swing.JLabel quantityLbl;
    private javax.swing.JPanel saleInputs;
    private javax.swing.JPanel salePnl;
    private javax.swing.JScrollPane saleSP;
    private javax.swing.JLabel saleSelIDLbl;
    private com.toedter.calendar.JDateChooser saleSellingDC;
    private javax.swing.JLabel saleSellingSDLbl;
    private javax.swing.JPanel salesBarPnl;
    private javax.swing.JScrollPane salesCloneSP;
    private javax.swing.JTable salesTable;
    private javax.swing.JTable salesTableClone;
    private javax.swing.JLabel salesTitleLbl;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTF;
    private javax.swing.JComboBox<String> selIDCB;
    private javax.swing.JButton selItemIDBtn;
    private javax.swing.JPanel selItemIDPnl;
    private javax.swing.JComboBox<String> selSaleIDCB;
    private javax.swing.JPanel selSaleIDPnl;
    private javax.swing.JLabel selectIDLbl;
    private javax.swing.JLabel sellFeesLbl;
    private javax.swing.JFormattedTextField sellFeesTF;
    private com.toedter.calendar.JDateChooser sellingDC;
    private javax.swing.JLabel sellingDateLbl;
    private javax.swing.JLabel sellingPriceLbl;
    private javax.swing.JFormattedTextField sellingPriceTF;
    private javax.swing.JButton settingsBtn;
    private javax.swing.JDialog settingsDialog;
    private javax.swing.JLabel settingsLbl;
    private javax.swing.JLabel shipFeesLbl;
    private javax.swing.JFormattedTextField shipFeesTF;
    private javax.swing.JLabel supplierLbl;
    private javax.swing.JTextField supplierTF;
    private javax.swing.JTabbedPane tabbedPnl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JLabel totItemsLbl;
    private javax.swing.JLabel totProfitsLbl;
    private javax.swing.JFormattedTextField totalQtyTF;
    private javax.swing.JButton updtItemBtn;
    private javax.swing.JButton updtSaleBtn;
    // End of variables declaration//GEN-END:variables
}
